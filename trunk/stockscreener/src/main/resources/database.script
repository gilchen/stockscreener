CREATE TABLE BSE_ICICI_MAPPING(
	STOCK_CODE VARCHAR(10),
	SC_CODE INT(11),
	PRIMARY KEY (STOCK_CODE)
);

CREATE TABLE ALERT(
	ALERT_ID BIGINT AUTO_INCREMENT,
	STOCK_CODE VARCHAR(10),
	TRX_TYPE VARCHAR(20),
	EVENT_DATE DATE,
	OPPORTUNITY_TYPE VARCHAR(50),
	EVENT_PRICE DOUBLE,
	TARGET_PRICE VARCHAR(20),
	SLTP DOUBLE NULL,
	EVENT_TYPE VARCHAR(50),
	QTY INT(5),
	IS_ACTIVE CHAR(1),
	PRIMARY KEY (ALERT_ID),
	FOREIGN KEY (STOCK_CODE) REFERENCES BSE_ICICI_MAPPING (STOCK_CODE)
);

CREATE TABLE NYSE_ALERT(
	ALERT_ID BIGINT AUTO_INCREMENT,
	SYMBOL VARCHAR(30),
	TRX_TYPE VARCHAR(20),
	EVENT_DATE DATE,
	OPPORTUNITY_TYPE VARCHAR(50),
	EVENT_PRICE DOUBLE,
	TARGET_PRICE VARCHAR(20),
	EVENT_TYPE VARCHAR(50),
	QTY INT(5),
	IS_ACTIVE CHAR(1),
	PRIMARY KEY (ALERT_ID)
);

CREATE TABLE BSE(
	TRADE_DATE  DATE
	SC_CODE     INT(11)
	SC_NAME     VARCHAR(30)
	SC_GROUP    VARCHAR(10)
	SC_TYPE     VARCHAR(10)
	OPEN        DOUBLE
	HIGH        DOUBLE
	LOW         DOUBLE
	CLOSE       DOUBLE
	LAST        DOUBLE
	PREVCLOSE   DOUBLE
	NO_TRADES   BIGINT(20)
	NO_OF_SHRS  BIGINT(20)
	NET_TURNOV  DOUBLE
	TDCLOINDI   VARCHAR(10),
	PRIMARY KEY (TRADE_DATE, SC_CODE)
);

CREATE TABLE NYSE(
	TRADE_DATE  DATE,
	SYMBOL      VARCHAR(30),
	OPEN        DOUBLE,
	HIGH        DOUBLE,
	LOW         DOUBLE,
	CLOSE       DOUBLE,
	VOLUME      BIGINT(20),
	PRIMARY KEY (TRADE_DATE, SYMBOL)
);

CREATE TABLE KEY_VALUE(
	K VARCHAR(50),
	V VARCHAR(50),
	PRIMARY KEY (K)
);

CREATE TABLE REPORT(
	REPORT_NAME VARCHAR(50),
	CONTENT     MEDIUMTEXT,
	PRIMARY KEY(REPORT_NAME)
);

CREATE TABLE HOLIDAYS(
	HOLIDAY DATE,
	PRIMARY KEY(HOLIDAY)
);

/*
CREATE TEMPORARY TABLE TMP1(
	ID BIGINT AUTO_INCREMENT,
	TRADE_DATE  DATE,
	SYMBOL      VARCHAR(30),
	OPEN        DOUBLE,
	HIGH        DOUBLE,
	LOW         DOUBLE,
	CLOSE       DOUBLE,
	VOLUME      BIGINT(20),
	PRIMARY KEY (ID)
);

CREATE TEMPORARY TABLE TMP2(
	ID BIGINT AUTO_INCREMENT,
	TRADE_DATE  DATE,
	SYMBOL      VARCHAR(30),
	OPEN        DOUBLE,
	HIGH        DOUBLE,
	LOW         DOUBLE,
	CLOSE       DOUBLE,
	VOLUME      BIGINT(20),
	PRIMARY KEY (ID)
);

INSERT INTO TMP1 (TRADE_DATE, SYMBOL, OPEN, HIGH, LOW, CLOSE, VOLUME) SELECT * FROM NYSE WHERE SYMBOL='SOXS' AND VOLUME > 0 AND TRADE_DATE >= '2010-03-01' ORDER BY TRADE_DATE ASC;
INSERT INTO TMP2 (TRADE_DATE, SYMBOL, OPEN, HIGH, LOW, CLOSE, VOLUME) SELECT * FROM NYSE WHERE SYMBOL='SOXS' AND VOLUME > 0 AND TRADE_DATE >  '2010-03-01' ORDER BY TRADE_DATE ASC;


SELECT
	A.TRADE_DATE,
	B.TRADE_DATE,
	A.CLOSE PREV_CLOSE,
	B.HIGH,
	ROUND( ((B.HIGH-A.CLOSE)/A.CLOSE)*100.0, 2) HIGH_PC,
	B.CLOSE,
	ROUND( ((B.CLOSE-A.CLOSE)/A.CLOSE)*100.0, 2) CLOSE_PC
FROM
	TMP1 A,
	TMP2 B
WHERE
	A.ID=B.ID
	AND B.HIGH > (A.CLOSE + (A.CLOSE * 0.06));
---------------
SELECT
	A.TRADE_DATE,
	B.TRADE_DATE,
	A.CLOSE PREV_CLOSE,
	B.LOW,
	ROUND( ((B.LOW-A.CLOSE)/A.CLOSE)*100.0, 2) LOW_PC,
	B.CLOSE,
	ROUND( ((B.CLOSE-A.CLOSE)/A.CLOSE)*100.0, 2) CLOSE_PC
FROM
	TMP1 A,
	TMP2 B
WHERE
	A.ID=B.ID
	AND B.LOW < (A.CLOSE - (A.CLOSE * 0.06));

SELECT 
	(SELECT
		COUNT(*)
		/*
		A.TRADE_DATE,
		B.TRADE_DATE,
		A.CLOSE PREV_CLOSE,
		B.HIGH,
		ROUND( ((B.HIGH-A.CLOSE)/A.CLOSE)*100.0, 2) HIGH_PC,
		B.CLOSE,
		ROUND( ((B.CLOSE-A.CLOSE)/A.CLOSE)*100.0, 2) CLOSE_PC
		*/
	FROM
		TMP1 A,
		TMP2 B
	WHERE
		A.ID=B.ID
		AND B.HIGH > (A.CLOSE + (A.CLOSE * 0.00)) AND B.HIGH < (A.CLOSE + (A.CLOSE * 0.02))
	) _0_2;


SELECT 
	(SELECT
		COUNT(*)
		/*
		A.TRADE_DATE,
		B.TRADE_DATE,
		A.CLOSE PREV_CLOSE,
		B.HIGH,
		ROUND( ((B.HIGH-A.CLOSE)/A.CLOSE)*100.0, 2) HIGH_PC,
		B.CLOSE,
		ROUND( ((B.CLOSE-A.CLOSE)/A.CLOSE)*100.0, 2) CLOSE_PC
		*/
	FROM
		TMP1 A,
		TMP2 B
	WHERE
		A.ID=B.ID
		AND B.LOW < (A.CLOSE - (A.CLOSE * 0.00)) AND B.LOW > (A.CLOSE - (A.CLOSE * 0.02))
	) _0_2;

*/